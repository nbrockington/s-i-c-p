SICP_solutions_21_Ex201_211.txt

My solutions to Section 2.1, Exercises 2.1 to 2.11.

I skipped Exercise 2.12 - 2.16 because they were focussed on
arithmetic ideas rather than functional programming.

******
200421
200425

(Exercise 2.1)

; Define a better version of make-rat that handles both positive and
; negative arguments. Make-rat should normalize the sign so that if
; the rational number is positive, both the numerator and denominator
; are positive, and if the rational number is negative, only the
; numerator is negative.


(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))


(define (make-rat n d)
   (let ((g (gcd n d)))
      (let ((a (/ n g))
            (b (/ d g)))
         (if (is-neg? b)
             (cons (- a) (- b))
             (cons a b)))))


(define (is-neg? x) (< x 0))



(Exercise 2.2)

; Consider the problem of representing line segments in a plane. Each
; segment is represented as a pair of points: a starting point and an
; ending point. Define a constructor make-segment and selectors
; start-segment and end-segment that define the representation of
; segments in terms of points. Furthermore, a point can be represented
; as a pair of numbers: the x coordinate and the y
; coordinate. Accordingly, specify a constructor make-point and
; selectors x-point and y-point that define this
; representation. Finally, using your selectors and constructors,
; define a procedure midpoint-segment that takes a line segment as
; argument and returns its midpoint (the point whose coordinates are
; the average of the coordinates of the endpoints). To try your
; procedures, you'll need a way to print points:


; Procedure to print points, from book:

(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))


; Defining constructor (make-segment):

(define (make-segment start-segment end-segment)
   (cons start-segment end-segment))


; Defining selectors (start-segment) and (end-segment):

(define (start-segment segment)
   (car segment))

(define (end-segment segment)
  (cdr segment))


; Defining constructor (make-point):

(define (make-point x-point y-point)
   (cons x-point y-point))


; Defining selectors (x-point) and (y-point):

(define (x-point point)
   (car point))

(define (y-point point)
   (cdr point))


; Defining procedure (midpoint-segment):

(define (midpoint-segment segment)
   (make-point (average (x-point (start-segment segment))
                        (x-point (end-segment segment)))
               (average (y-point (start-segment segment))
                        (y-point (end-segment segment)))))


(define (average a b)
   (/ (+ a b) 2.0))



(Exercise 2.3)

; Implement a representation for rectangles in a plane. (Hint: You may
; want to make use of exercise 2.2.) In terms of your constructors and
; selectors, create procedures that compute the perimeter and the area
; of a given rectangle. Now implement a different representation for
; rectangles. Can you design your system with suitable abstraction
; barriers, so that the same perimeter and area procedures will work
; using either representation?


; Procedures to compute perimeter and area of rectange by using the
; (lengths of) its two dimensions. These work with either
; representation of rectangles define below, where (rect-dim-1) and
; (rect-dim2) are defined differently for each representation.

(define (rect-perimeter rect)
   (+ (* 2 (rect-dim-1 rect))
      (* 2 (rect-dim-2 rect))))

(define (rect-area rect)
   (* (rect-dim-1 rect) (rect-dim-2 rect)))


; REPRESENTATION 1: 

; Rectangle as a combination of two line segments * which must be
; oriented at right angles to each other and share a point*. We use
; the line segment representation procedures from Exercise 2.2:

; Define constructor (make-rectangle) and selectors (first-segment)
; and (second-segment):

(define (make-rectangle segment1 segment2)
       (cons segment1 segment2))

(define (first-segment rect)
   (car rect))

(define (second-segment rect)
   (cdr rect))


; Define procedures (rect-dim-1) and (rect-dim-2) that extract the
; lengths of the two dimensions of the rectangle:

(define (rect-dim-1 rect)
   (segment-length (first-segment rect)))

(define (rect-dim-2 rect)
   (segment-length (second-segment rect)))

(define (segment-length segment)
   (let ((x1 (x-point (start-segment segment)))
         (y1 (y-point (start-segment segment)))
         (x2 (x-point (end-segment segment)))
         (y2 (y-point (end-segment segment))))
        (sqrt (+ (expt (- x2 x1) 2)
                 (expt (- y2 y1) 2)))))



; REPRESENTATION 2:

; Rectangle ABCD defined by the coordinates of three of its vertices
; A, B and C (after possible relabelling but with vertex order
; maintained).

; Define constructor (make-rectangle) and selectors (first-coord),
; (second-coord) and (third-coord):

(define (make-rectangle coord-1 coord-2 coord-3)
   (cons coord-1 (cons coord-2 coord-3)))

(define (first-coord rect)
   (car rect))

(define (second-coord rect)
   (car (cdr rect)))

(define (third-coord rect)
   (cdr (cdr rect)))

; Define procedures (rect-dim-1) and (rect-dim-2) that extract the
; lengths of the two dimensions of the rectangle, using the segment
; procedures from Exercise 2.2 and the (segment-length) procedure
; defined above::

(define (rect-dim-1 rect)
   (segment-length
      (make-segment (first-coord rect)
                    (second-coord rect))))

(define (rect-dim-2 rect)
   (segment-length
      (make-segment (second-coord rect)
                    (third-coord rect))))



(Exercise 2.4)

Here is an alternative procedural representation of pairs. For this
representation, verify that (car (cons x y)) yields x for any objects
x and y.

(define (cons x y)
  (lambda (m) (m x y)))

(define (car z)
  (z (lambda (p q) p)))

What is the corresponding definition of cdr? (Hint: To verify that
this works, make use of the substitution model of section 1.1.5.)


ANS. By the substitution model:

(car (cons x y))
((lambda (m) (m x y)) (lambda (p q) p))
((lambda (p q) p) x y)
x

The corresponding defition of (cdr) is:

(define (cdr z)
 (z (lambda (p q) q)))

Because by the substitution model:

(cdr (cons x y))
((lambda (m) (m x y)) (lambda (p q) q))
((lambda (p q) q) x y)
y



(Exercise 2.5)

; Show that we can represent pairs of nonnegative integers using only
; numbers and arithmetic operations if we represent the pair a and b
; as the integer that is the product (2^a)(3^b). Give the
; corresponding definitions of the procedures cons, car, and cdr.

; By the Fundamental Theorem of Arithmetic, every positive integer can
; be represented as a product of prime numbers and this representation
; is unique (up to order of factors). Since 2 and 3 are prime numbers,
; there is a unique representation of the product (2^a)(3^b) and so
; (a) and (b) can be unambiguously recovered by prime factorisation.


(define (new-cons x y)
   (* (expt 2 x)
      (expt 3 y)))

(define (new-car z)
   (find-exponent z 2 0))

(define (new-cdr z)
   (find-exponent z 3 0))


(define (find-exponent z d count)
   (if (> (remainder z d) 0)
       count
       (find-exponent (/ z d) d (+ 1 count))))


(Exercise 2.6)

; In case representing pairs as procedures wasn't mind-boggling
; enough, consider that, in a language that can manipulate procedures,
; we can get by without numbers (at least insofar as nonnegative
; integers are concerned) by implementing 0 and the operation of
; adding 1 as

(define zero (lambda (f) (lambda (x) x)))

(define (add-1 n)
  (lambda (f) (lambda (x) (f ((n f) x)))))

; This representation is known as Church numerals, after its inventor,
; Alonzo Church, the logician who invented the lambda calculus.

; Define one and two directly (not in terms of zero and add-1). (Hint:
; Use substitution to evaluate (add-1 zero)). Give a direct definition
; of the addition procedure + (not in terms of repeated application of
; add-1).

(define one (lambda (f) (lambda (x) (f x))))

(define two (lambda (f) (lambda (x) (f (f x)))))

; Direct definition of the + procedure:

(define (church+ n m)
   (lambda (f) (lambda (x) ((lambda (y) ((n f) y)) ((m f) x)))))


(Exercise 2.7)

; Alyssa's program is incomplete because she has not specified the
; implementation of the interval abstraction. Here is a definition of
; the interval constructor:

(define (make-interval a b) (cons a b))

; Define selectors upper-bound and lower-bound to complete the
; implementation.

(define (lower-bound interval) (car interval))

(define (upper-bound interval) (cdr interval))



(Exercise 2.8)

; Using reasoning analogous to Alyssa's, describe how the difference
; of two intervals may be computed. Define a corresponding subtraction
; procedure, called sub-interval.

; The difference of two intervals x and y, i.e. the interval of x - y,
; will have a lower bound of LB(x) - UB(Y) and upper bound of UB(x) -
; LB(y).
;
; Defining procedure (sub-interval) accordingtly:

(define (sub-interval x y)
   (make-interval (- (lower-bound x) (upper-bound y))
                  (- (upper-bound x) (lower-bound y))))


; Constructor and selectors from Exercise 2.7

(define (make-interval a b) (cons a b))

(define (lower-bound interval) (car interval))

(define (upper-bound interval) (cdr interval))



(Exercise 2.9)

The width of an interval is half of the difference between its upper
and lower bounds. The width is a measure of the uncertainty of the
number specified by the interval. For some arithmetic operations the
width of the result of combining two intervals is a function only of
the widths of the argument intervals, whereas for others the width of
the combination is not a function of the widths of the argument
intervals. Show that the width of the sum (or difference) of two
intervals is a function only of the widths of the intervals being
added (or subtracted). Give examples to show that this is not true for
multiplication or division.

ANS. Sum: Let interval z be the sum of intervals x + y as defined in
previous Exercises. Then width(z) 

= ( UB(z) - LB(z) ) / 2

= ( ( UB(x) + UB(y) ) - ( LB(x) + LB(y) ) ) / 2

= UB(x)/2 + UB(y)/2 - LB(x)/2 - LB(y)/2

= ( UB(x) - LB(x) ) / 2 + ( UB(y) - LB(y) ) / 2

= width(x) + width(y). 


Difference: Let interval z be the difference of intervals x - y as
defined in previous Exercises. Then width(z)

= ( UB(z) - LB(z) ) / 2

= ( ( UB(x) - LB(y) ) - ( ( LB(x) - UB(y) ) ) / 2

= UB(x)/2 - LB(y)/2 - LB(x)/2 + UB(y)/2

= ( UB(x) - LB(x) )/2 + ( UB(y) - LB(y) )/2

= width(x) + width(y)


Multiplication and divison: The width of the product (or quotient) of
two intervals is not a function only of the widths of the intervals
being multiplied (or divded). This can be shown by the following
counterexamples:

Multiplication: Let a = [0.1, 0.2) (width = 0.1), let b = [10, 20)
(width = 10). Then ab = [1, 4) with width 3. But if a = [0.2 , 0.3)
(width = 0.1 again) and b = [20, 30) (width = 10 again), then ab = [4,
9) with width 9 /= 3. Hence the width of the product does not depend
only on the widths of the multiplied intervals. The same
counterexamples can be used to show the same result for quotients.


(Exercise 2.10)

; Ben Bitdiddle, an expert systems programmer, looks over Alyssa's
; shoulder and comments that it is not clear what it means to divide
; by an interval that spans zero. Modify Alyssa's code to check for
; this condition and to signal an error if it occurs.

; Procedure (mul-interval) from book:

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

; Amended (div-interval):

(define (div-interval x y)
   (if (spans-zero y)
       (display "Error: Divisor spans zero")
       (mul-interval x
                     (make-interval (/ 1.0 (upper-bound y))
                                    (/ 1.0 (lower-bound y))))))

(define (spans-zero y)
   (< (* (upper-bound y) (lower-bound y)) 0))



(Exercise 2.11)

; In passing, Ben also cryptically comments: ``By testing the signs of
; the endpoints of the intervals, it is possible to break mul-interval
; into nine cases, only one of which requires more than two
; multiplications.'' Rewrite this procedure using Ben's suggestion.

; New procedure (mul-interval):                                                     

(define (mul-interval a b)
   (cond ((> (lower-bound a) 0)
          (cond ((> (lower-bound b) 0) (make-interval
                                          (* (lower-bound a) (lower-bound b))
                                          (* (upper-bound a) (upper-bound b))))
                ((< (upper-bound b) 0) (make-interval
                                          (* (upper-bound a) (lower-bound b))
                                          (* (lower-bound a) (upper-bound b))))
                (else (make-interval
                         (* (upper-bound a) (lower-bound b))
                         (* (upper-bound a) (upper-bound b))))))
         ((< (upper-bound a) 0)
          (cond ((> (lower-bound b) 0) (make-interval
                                          (* (lower-bound a) (upper-bound b))
                                          (* (upper-bound a) (lower-bound b))))
                ((< (upper-bound b) 0) (make-interval
                                          (* (upper-bound a) (upper-bound b))
                                          (* (lower-bound a) (lower-bound b))))
                (else (make-interval
                         (* (lower-bound a) (upper-bound b))
                         (* (lower-bound a) (lower-bound b))))))
         (else
          (cond ((> (lower-bound b) 0) (make-interval
                                          (* (lower-bound a) (upper-bound b))
                                          (* (upper-bound a) (upper-bound b))))
                ((< (upper-bound b) 0) (make-interval
                                          (* (upper-bound a) (lower-bound b))
                                          (* (lower-bound a) (lower-bound b))))
                (else (let ((p1 (* (upper-bound a) (lower-bound b)))
                            (p2 (* (lower-bound a) (upper-bound b)))
                            (p3 (* (upper-bound a) (upper-bound b)))
                            (p4 (* (lower-bound a) (lower-bound b))))
                         (make-interval (min p1 p2) (max p3 p4))))))))
