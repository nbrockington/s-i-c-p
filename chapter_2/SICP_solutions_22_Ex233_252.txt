SICP_solutions_22_Ex233_253.txt

******
200528
200530
200709

(Exercise 2.33)

; Fill in the missing expressions to complete the following
; definitions of some basic list-manipulation operations as
; accumulations:

(define nil '())

(define (map-2 p sequence)
  (accumulate (lambda (x y)(cons (p x) y)) nil sequence))

(define (append-2 seq1 seq2)
  (accumulate cons seq2 seq1))

(define (length-2 sequence)
  (accumulate (lambda (x y) (+ 1 y)) 0 sequence))

; The provided procedure (accumulate):

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))


(Exercise 2.34)

; Evaluating a polynomial in x at a given value of x can be formulated
; as an accumulation. We evaluate the polynomial using a well-known
; algorithm called Horner's rule, which structures the computation as
;
; ( ... ( a_n * x + a_(n-1) ) * x + ... + a_1 ) * x + a_0
;
; In other words, we start with a_n, multiply by x, add a_(n-1),
; multiply by x, and so on, until we reach a_0. Fill in the following
; template to produce a procedure that evaluates a polynomial using
; Horner's rule. Assume that the coefficients of the polynomial are
; arranged in a sequence, from a_0 through a_n.

(define (horner-eval x coefficient-sequence)
  (accumulate (lambda (this-coeff higher-terms) 
                      (+ this-coeff 
                         (* x higher-terms)))
              0
              coefficient-sequence))

; For example, to compute 1 + 3x + 5x3 + x5 at x = 2 you would evaluate
; (horner-eval 2 (list 1 3 0 5 0 1))

; 1 ]=> (horner-eval 2 (list 1 3 0 5 0 1))
; Value: 79


(Exercise 2.35)

; Redefine count-leaves from section 2.2.2 as an accumulation:

; Procedure count-leaves from Section 2.2.2:

(define (prev-count-leaves x)
  (cond ((null? x) 0)  
        ((not (pair? x)) 1)
        (else (+ (count-leaves (car x))
                 (count-leaves (cdr x))))))


; Procedure count-leaves redefined as an accumulation:

(define (count-leaves t)
  (accumulate (lambda (x y) (+ (length x) y))
              0 
              (map create-flat-list t)))


; Calling the following procedures:

(define (length x) 
  (if (null? x) 0 (+ 1 (length (cdr x)))))

(define (create-flat-list x)
  (cond ((null? x) x)
        ((not(pair? x)) (list x))
        (else (append (create-flat-list (car x))
                      (create-flat-list (cdr x))))))

; NB. (Create-flat-list) is equivalent to (enumerate-tree) from the
; text)
;
; NB2. This seems a silly way to do it, since if you have
; (enumerate-tree), you can just use (length (enumerate-tree)).
;
; A much more satisfying solution from
; http://mngu2382.github.io/sicp/chapter2/01-exercise09.html
; 
; (define (count-leaves tree)
;    (accumulate +
;                0
;                (map (lambda (x) 1) (enumerate-tree tree))))


(Exercise 2.36)

; The procedure accumulate-n is similar to accumulate except that it
; takes as its third argument a sequence of sequences, which are all
; assumed to have the same number of elements. It applies the
; designated accumulation procedure to combine all the first elements
; of the sequences, all the second elements of the sequences, and so
; on, and returns a sequence of the results. For instance, if s is a
; sequence containing four sequences, ((1 2 3) (4 5 6) (7 8 9) (10 11
; 12)), then the value of (accumulate-n + 0 s) should be the sequence
; (22 26 30). Fill in the missing expressions in the following
; definition of accumulate-n:

(define nil '())

(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      nil
      (cons (accumulate op init (map car seqs))
            (accumulate-n op init (map cdr seqs)))))


(Exercise 2.37)

; Suppose we represent vectors v = (v_i) as sequences of numbers, and
; matrices m = (m_i,j) as sequences of vectors (the rows of the
; matrix). For example, the matrix
;  
; [1 2 3 4]
; |4 5 6 6|
; [6 7 8 9]
; 
; is represented as the sequence ((1 2 3 4) (4 5 6 6) (6 7 8 9)). With
; this representation, we can use sequence operations to concisely
; express the basic matrix and vector operations.
; 
; We can define the dot product as:

(define (dot-product v w)
  (accumulate + 0 (map * v w)))

; Fill in the missing expressions in the following procedures for
; computing the other matrix operations.

(define (matrix-*-vector m v)
  (map (lambda (r) (dot-product v r)) m))

(define (transpose mat)
  (accumulate-n cons '() mat))

(define (matrix-*-matrix m n)
  (let ((cols (transpose n)))
    (map (lambda (r) (matrix-*-vector cols r)) m)))


(Exercise 2.38)

The accumulate procedure is also known as fold-right, because it
combines the first element of the sequence with the result of
combining all the elements to the right. There is also a fold-left,
which is similar to fold-right, except that it combines elements
working in the opposite direction:

(define (fold-left op initial sequence)
  (define (iter result rest)
    (if (null? rest)
        result
        (iter (op result (car rest))
              (cdr rest))))
  (iter initial sequence))

What are the values of

(fold-right / 1 (list 1 2 3))		=> 3/2
(fold-left / 1 (list 1 2 3))		=> 1/6
(fold-right list nil (list 1 2 3))	=> '(1 (2 (3 ())))
(fold-left list nil (list 1 2 3))	=> '(((() 1) 2) 3)

Give a property that op should satisfy to guarantee that fold-right
and fold-left will produce the same values for any sequence.

ANS. 'Op' should be a commutative operation. 


(Exercise 2.39)

; Complete the following definitions of reverse (exercise 2.18) in
; terms of fold-right and fold-left from exercise 2.38:

(define nil '())

(define (reverse-fr sequence)
  (fold-right (lambda (x y) (append y (list x))) nil sequence))

(define (reverse-fl sequence)
  (fold-left (lambda (x y) (append (list y) x)) nil sequence))



(Exercise 2.40)

; Define a procedure unique-pairs that, given an integer n, generates
; the sequence of pairs (i,j) with 1<= j< i<= n. Use unique-pairs to
; simplify the definition of prime-sum-pairs given above.

; Defining new procedure "unique-pairs":

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence) (accumulate op initial (cdr sequence)))))

(define (unique-pairs n)
  (define (enumerate-interval low high)
    (if (> low high) 
	'()
	(cons low (enumerate-interval (+ low 1) high))))
  (define (flatmap proc seq)
    (accumulate append '() (map proc seq)))
  (flatmap (lambda (i)
	     (map (lambda (j) (list i j))
		  (enumerate-interval 1 (- i 1))))
	   (enumerate-interval 1 n)))


; Defining "prime-sum-pairs" using "unique-pairs":

(define (prime-sum-pairs n)
  (map (lambda (x) (list (car x) (cadr x) (+ (car x) (cadr x))))
       (filter (lambda (x) (prime? (+ (car x) (cadr x))))
	       (unique-pairs n))))


; Testing for primality in O(sqrt(n)) time:

(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
	((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))

(define (divides? a b)
  (= (remainder b a) 0))

(define (prime? n)
  (= n (smallest-divisor n)))



(Exercise 2.41)

; Write a procedure to find all ordered triples of distinct positive
; integers i, j, and k less than or equal to a given integer n that
; sum to a given integer s.

; Define "unique-triplets":

(define (enumerate-interval low high)
  (if (> low high) 
      '()
      (cons low (enumerate-interval (+ low 1) high))))

(define (flatmap proc seq)
  (accumulate append '() (map proc seq)))

(define (unique-pairs n)
  (flatmap (lambda (i)
	     (map (lambda (j) (list i j))
		  (enumerate-interval 1 (- i 1))))
	   (enumerate-interval 1 n)))

(define (triplets-for-n n)
  (map (lambda (x) (cons n x))
       (unique-pairs (- n 1))))

(define (unique-triplets n)
  (flatmap triplets-for-n
	   (enumerate-interval 1 n)))

; Define "s-sum-triplets":

(define (s-sum-triplets s n)
  (define (triplet-sum-to-s? x)
    (= s (+ (car x) (cadr x) (caddr x))))
  (filter triplet-sum-to-s?
	  (unique-triplets n)))


			  
(Exercise 2.42)

; The ``eight-queens puzzle'' asks how to place eight queens on a
; chessboard so that no queen is in check from any other (i.e., no two
; queens are in the same row, column, or diagonal). One possible
; solution is shown in figure 2.8. One way to solve the puzzle is to
; work across the board, placing a queen in each column. Once we have
; placed k - 1 queens, we must place the kth queen in a position where
; it does not check any of the queens already on the board. We can
; formulate this approach recursively: Assume that we have already
; generated the sequence of all possible ways to place k - 1 queens in
; the first k - 1 columns of the board. For each of these ways,
; generate an extended set of positions by placing a queen in each row
; of the kth column. Now filter these, keeping only the positions for
; which the queen in the kth column is safe with respect to the other
; queens. This produces the sequence of all ways to place k queens in
; the first k columns. By continuing this process, we will produce not
; only one solution, but all solutions to the puzzle.
;
; We implement this solution as a procedure queens, which returns a
; sequence of all solutions to the problem of placing n queens on an
; n√ó n chessboard. Queens has an internal procedure queen-cols that
; returns the sequence of all ways to place queens in the first k
; columns of the board.
; 
; In this procedure rest-of-queens is a way to place k - 1 queens in
; the first k - 1 columns, and new-row is a proposed row in which to
; place the queen for the kth column. Complete the program by
; implementing the representation for sets of board positions,
; including the procedure adjoin-position, which adjoins a new
; row-column position to a set of positions, and empty-board, which
; represents an empty set of positions. You must also write the
; procedure safe?, which determines for a set of positions, whether
; the queen in the kth column is safe with respect to the
; others. (Note that we need only check whether the new queen is safe
; -- the other queens are already guaranteed safe with respect to each
; other.)

; Provided procedures: 

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence) (accumulate op initial (cdr sequence)))))

(define (flatmap procedure sequence)
  (accumulate append '() (map procedure sequence)))

(define (enumerate-interval low high)
  (if (> low high)
      '()
      (cons low (enumerate-interval (+ low 1) high))))

(define (queens board-size)
  (define (queen-cols k)
    (if (= k 0)
	(list empty-board)
	(filter 
	 (lambda (positions) (safe? k positions))
	 (flatmap 
	  (lambda (rest-of-queens) 
	    (map (lambda (new-row)
		   (adjoin-position new-row k rest-of-queens))
		 (enumerate-interval 1 board-size)))
	  (queen-cols (- k 1))))))
  (queen-cols board-size))

; Implementing representation of sets of board positions as a list of
; the different ways to place queens in the first k columns of the
; board. Each way of placing queens is itself a list containing
; tuples, where each tuple (m n) indicates the row (m) and column (n)
; of each queen's position. New positions are consed on.

(define empty-board '())

(define (adjoin-position new-row k rest-of-queens)
  (cons (list new-row k) rest-of-queens))

(define (safe? k positions) 
  (and (not (same-row? k positions)) (not (same-diagonal? k positions))))

(define (get-kth-position k positions)
  (list-ref positions (- (length positions) k )))

(define (positions-without-k k positions)
  (define (remove-kth-helper k-index positions n)
    (cond ((null? positions) positions)
	  ((= k-index n) (remove-kth-helper k-index (cdr positions) (+ 1 n)))
	  (else (cons (car positions) 
		      (remove-kth-helper k-index (cdr positions) (+ 1 n))))))
  (remove-kth-helper (- (length positions) k) positions 0))
    

(define (same-row? k positions)
  (define (same-row-helper row-val positions)
    (cond ((null? positions) False)
	  ((= row-val (caar positions)) True)
	  (else (same-row-helper row-val (cdr positions)))))
  (same-row-helper (car (get-kth-position k positions))
		   (positions-without-k k positions)))

(define (same-diagonal? k positions)
  (define (same-diagonal-helper kth-position other-positions)
    (cond ((null? other-positions) False)
	  ((on-a-diagonal? kth-position (car other-positions)) True)
	  (else (same-diagonal-helper kth-position (cdr other-positions)))))
  (same-diagonal-helper (get-kth-position k positions)
			(positions-without-k k positions)))

(define (on-a-diagonal? pos1 pos2)
  (let ((x1 (car pos1))
	(x2 (car pos2))
	(y1 (cadr pos1))
	(y2 (cadr pos2)))
    (= (abs (- x1 x2)) (abs (- y1 y2)))))


(Exercise 2.43)

Louis Reasoner is having a terrible time doing exercise 2.42. His
queens procedure seems to work, but it runs extremely slowly. (Louis
never does manage to wait long enough for it to solve even the 6√ó 6
case.) When Louis asks Eva Lu Ator for help, she points out that he
has interchanged the order of the nested mappings in the flatmap,
writing it as

(flatmap
 (lambda (new-row)
   (map (lambda (rest-of-queens)
          (adjoin-position new-row k rest-of-queens))
        (queen-cols (- k 1))))
 (enumerate-interval 1 board-size))

Explain why this interchange makes the program run slowly. Estimate
how long it will take Louis's program to solve the eight-queens
puzzle, assuming that the program in exercise 2.42 solves the puzzle
in time T.

ANS. In this reversed nesting, the procedure (queen-cols (- k 1)) is
evaluated for each of the possible "new-row"s generated by
(enumerate-interval 1 n), where n = board-size.

In the correct procedure, each (queen-cols k), for k = 1 to n, is
evaluated once. [Each (queen-cols k) procedure takes O(n^k) time to
run, by induction on number of queens already placed. Hence the whole
procedure takes O(n^(k+1)) time.]

In the erroneous procedure: 

(queen-cols n) is evaluated once
(queen-cols (n-1)) is evaluated n times when (queen-cols n) is evaluated
(queen-cols (n-2)) is evaluated n times whenever (queen-cols (n-1)) is evaluated
(queen-cols (n-3)) is evaluated n times whenever (queen-cols (n-2)) is evaluated
etc...

Hence, each (queen-cols k) is evaluated n^(n-k) times. 

E.g. If n = 8, 
k = 8, eval-times = 1
7, 8
6, 8^2
5, 8^3
4, 8^4
3, 8^5
2, 8^6
1, 8^7

Hence, the erroneous procedure takes O(n^n) times longer, i.e., O(n^n)T. 


