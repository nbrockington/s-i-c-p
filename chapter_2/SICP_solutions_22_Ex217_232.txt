SICP_solutions_22_ex217_232.txt


******
200526
200527

(Exercise 2.17)

; Define a procedure last-pair that returns the list that contains
; only the last element of a given (nonempty) list:

(define (last-pair list)
  (if (= (length list) 1)
      (car list)
      (last-pair (cdr list))))


(Exercise 2.18)

; Define a procedure reverse that takes a list as argument and returns
; a list of the same elements in reverse order:

(define	 (reverse list)
  (define (reverse-helper from-list to-list)
    (if	  (= (length from-list) 0)
      	  to-list
      	  (reverse-helper (cdr from-list) (cons (car from-list) to-list))))
  (reverse-helper list '()))


(Exercse 2.19)

; Consider the change-counting program of section 1.2.2. It would be
; nice to be able to easily change the currency used by the program,
; so that we could compute the number of ways to change a British
; pound, for example. As the program is written, the knowledge of the
; currency is distributed partly into the procedure first-denomination
; and partly into the procedure count-change (which knows that there
; are five kinds of U.S. coins). It would be nicer to be able to
; supply a list of coins to be used for making change.

; We want to rewrite the procedure cc so that its second argument is a
; list of the values of the coins to use rather than an integer
; specifying which coins to use. We could then have lists that defined
; each kind of currency:

(define us-coins (list 50 25 10 5 1))
(define uk-coins (list 100 50 20 10 5 2 1 0.5))

; We could then call cc as follows:
; (cc 100 us-coins)
; 292

; To do this will require changing the program cc somewhat. It will
; still have the same form, but it will access its second argument
; differently, as follows:

(define (cc amount coin-values)
  (cond ((= amount 0) 1)
        ((or (< amount 0) (no-more? coin-values)) 0)
        (else
         (+ (cc amount
                (except-first-denomination coin-values))
            (cc (- amount
                   (first-denomination coin-values))
                coin-values)))))

; Define the procedures first-denomination, except-first-denomination,
; and no-more? in terms of primitive operations on list
; structures. Does the order of the list coin-values affect the answer
; produced by cc? Why or why not?

(define (first-denomination coin-values)
  (car coin-values))

(define (except-first-denomination coin-values)
  (cdr coin-values))

(define (no-more? coin-values)
  (= (length coin-values) 0))

; The answer is not affected by the order of the coins in the list of
; coin-values, because the logic of the recursion, that is, adding
; together the number of ways possible including a certain coin value
; and excepting a certain coin value, does not depend on the exact
; coin value used.
;
;  1 ]=> us-coins
; Value: (50 25 10 5 1)
;
; 1 ]=> (cc 100 us-coins)
; Value: 292
;
; 1 ]=> (define us-coins-2 (list 25 50 5 10 1))
; Value: us-coins-2
;
; 1 ]=> us-coins-2
; Value: (25 50 5 10 1)
; 
; 1 ]=> (cc 100 us-coins)
; Value: 292


(Exercise 2.20)

; The procedures (+), (*), and (list) take arbitrary numbers of
; arguments. One way to define such procedures is to use define with
; dotted-tail notation. In a procedure definition, a parameter list
; that has a dot before the last parameter name indicates that, when
; the procedure is called, the initial parameters (if any) will have
; as values the initial arguments, as usual, but the final parameter's
; value will be a list of any remaining arguments. Use this notation
; to write a procedure (same-parity) that takes one or more integers
; and returns a list of all the arguments that have the same even-odd
; parity as the first argument. For example,

; (same-parity 1 2 3 4 5 6 7)
; ( 1 3 5 7)

; (same-parity 2 3 4 5 6 7)
; (2 4 6)

(define (same-parity x . y)
  (define (same-parity-helper x input-list)
    (let ((parity (remainder x 2)))
      (cond ((= (length input-list) 0)
             '())
            ((= (remainder (car input-list) 2) parity)
             (cons (car input-list) (same-parity-helper x (cdr input-list))))
            (else 
             (same-parity-helper x (cdr input-list))))))
  (same-parity-helper x (cons x y)))
                                                      

                              
(Exercise 2.21)

; The procedure square-list takes a list of numbers as argument and
; returns a list of the squares of those numbers.

; (square-list (list 1 2 3 4))
; (1 4 9 16)

; Here are two different definitions of square-list. Complete both of
; them by filling in the missing expressions:
; 
; (define (square-list items)
;   (if (null? items)
;       nil
;       (cons <??> <??>)))
; (define (square-list items)
;   (map <??> <??>))

(define nil '())

(define (square-list items)
  (if (null? items)
      nil
      (cons (* (car items) (car items)) (square-list (cdr items)))))

(define (square-list-2 items)
  (map (lambda (x) (* x x)) items))


(Exercise 2.22)

Louis Reasoner tries to rewrite the first square-list procedure of
exercise 2.21 so that it evolves an iterative process:

(define (square-list items)
  (define (iter things answer)
    (if (null? things)
        answer
        (iter (cdr things) 
              (cons (square (car things))
                    answer))))
  (iter items nil))

Unfortunately, defining square-list this way produces the answer list
in the reverse order of the one desired. Why?

Louis then tries to fix his bug by interchanging the arguments to
cons:

(define (square-list items)
  (define (iter things answer)
    (if (null? things)
        answer
        (iter (cdr things)
              (cons answer
                    (square (car things))))))
  (iter items nil))

This doesn't work either. Explain.

ANS. In the first case, the answer list is returned in reverse order
of the one desired because the procedure cons-es the square of each
element of the original list taken from left-to-right onto the answer
list that is being built up from right-to-left: since cons attaches an
element to the "front" (left-hand side) of a list, the square of each
element of the original list is attached to the left-hand side of the
elements that came before it in the original list, that reversing the
order. In the second case, what is being attached to each squared
element of the original list is a nested list of previously squared
elements, rather than the individual elements themselves. This does
not give a single-level list as an answer but instead a nested list.


(Exercise 2.23)

; The procedure for-each is similar to map. It takes as arguments a
; procedure and a list of elements. However, rather than forming a
; list of the results, for-each just applies the procedure to each of
; the elements in turn, from left to right. The values returned by
; applying the procedure to the elements are not used at all --
; for-each is used with procedures that perform an action, such as
; printing. For example,

; (for-each (lambda (x) (newline) (display x))
;          (list 57 321 88))
; 57
; 321
; 88

; The value returned by the call to for-each (not illustrated above)
; can be something arbitrary, such as true. Give an implementation of
; for-each.

(define (for-each proc items)
  (cond ((= (length items) 0) #t)
        (else
          (proc (car items))
          (for-each proc (cdr items)))))


(Exercise 2.24)

Suppose we evaluate the expression (list 1 (list 2 (list 3 4))). Give
the result printed by the interpreter, the corresponding
box-and-pointer structure, and the interpretation of this as a tree
(as in figure 2.6).

1 ]=> (list 1 (list 2 (list 3 4)))

;Value: (1 (2 (3 4)))

This is equivaluent to: 

1 ]=> (cons 1 (cons (cons 2 (cons (cons 3 (cons 4 '())) '())) '()))

;Value: (1 (2 (3 4)))

Box-and-pointer structure: 

-> [.][.]-> [.][/]
    |        |
   [1]      [.][.]-> [.][/]
             |        |
            [2]      [.][.]-> [.][/]
                      |        |
                     [3]      [4]

Interpretation as a tree: 

(1 (2 (3 4))
  /  \
 1  (2 (3 4))
     /   \
    2    (3 4)
          / \
         3   4


(Exercise 2.25)

Give combinations of cars and cdrs that will pick 7 from each of the
following lists:

(1 3 (5 7) 9)

((7))

(1 (2 (3 (4 (5 (6 7))))))

ANS. 

1 ]=> (car (cdr (car (cdr (cdr '(1 3 (5 7) 9))))))

;Value: 7

1 ]=> (car (car '((7))))

;Value: 7

1 ]=> (cadr (cadr (cadr (cadr (cadr (cadr '(1 (2 (3 (4 (5 (6 7))))))))))))

;Value: 7

*Where each "(cadr _)" represents "(car (cdr _))". 



(Exercise 2.26)

Suppose we define x and y to be two lists:

(define x (list 1 2 3))
(define y (list 4 5 6))

What result is printed by the interpreter in response to evaluating each of the following expressions:

(append x y)

(cons x y)

(list x y)

ANS. 

1 ]=> (append x y)

;Value: (1 2 3 4 5 6)

1 ]=> (cons x y)

;Value: ((1 2 3) 4 5 6)

1 ]=> (list x y)

;Value: ((1 2 3) (4 5 6))


(Exercise 2.27)

; Modify your reverse procedure of exercise 2.18 to produce a
; deep-reverse procedure that takes a list as argument and returns as
; its value the list with its elements reversed and with all sublists
; deep-reversed as well. For example,

(define x (list (list 1 2) (list 3 4)))

; x
; ((1 2) (3 4))

; (reverse x)
; ((3 4) (1 2))

; (deep-reverse x)
; ((4 3) (2 1))

(define (deep-reverse x)
  (cond ((not (pair? x)) x)
        (else (append (deep-reverse (cdr x))
                      (list (deep-reverse (car x)))))))


(define (reverse x)
  (cond	((null? x) x)
      	(else (append (reverse (cdr x))
      	              (list (car x))))))


(Exercise 2.28)

; Write a procedure fringe that takes as argument a tree (represented
; as a list) and returns a list whose elements are all the leaves of
; the tree arranged in left-to-right order. For example,

(define x (list (list 1 2) (list 3 4)))

; (fringe x)
; (1 2 3 4)

; (fringe (list x x))
; (1 2 3 4 1 2 3 4)

(define (fringe x)
  (cond ((null? x) x)
        ((not (pair? (car x))) (cons (car x) (fringe (cdr x))))
        (else (append (fringe (car x))
                      (fringe (cdr x))))))



(Exercise 2.29)

; A binary mobile consists of two branches, a left branch and a right
; branch. Each branch is a rod of a certain length, from which hangs
; either a weight or another binary mobile. We can represent a binary
; mobile using compound data by constructing it from two branches (for
; example, using list):

(define (make-mobile left right)
  (list left right))

; A branch is constructed from a length (which must be a number)
; together with a structure, which may be either a number
; (representing a simple weight) or another mobile:

(define (make-branch length structure)
  (list length structure))

; a.  Write the corresponding selectors left-branch and right-branch,
; which return the branches of a mobile, and branch-length and
; branch-structure, which return the components of a branch.

(define (left-branch mobile)
  (car mobile))

(define (right-branch mobile)
  (cadr mobile))

(define (branch-length branch)
  (car branch))

(define (branch-structure branch)
  (cadr branch))

; b.  Using your selectors, define a procedure total-weight that
; returns the total weight of a mobile.

(define (total-weight mobile)
  (+ (branch-weight (left-branch mobile))
     (branch-weight (right-branch mobile))))

(define (branch-weight b)
  (if (not (pair? (branch-structure b)))
      (branch-structure b)
      (total-weight (branch-structure b))))


; c.  A mobile is said to be balanced if the torque applied by its
; top-left branch is equal to that applied by its top-right branch
; (that is, if the length of the left rod multiplied by the weight
; hanging from that rod is equal to the corresponding product for the
; right side) and if each of the submobiles hanging off its branches
; is balanced. Design a predicate that tests whether a binary mobile
; is balanced.

(define (is-balanced? x)
  (define (torque b)
    (* (branch-length b) (branch-weight b)))
  (if (not (pair? x))
      #t
      (and (eq? (torque (left-branch x)) (torque (right-branch x)))
           (is-balanced? (branch-structure (left-branch x)))
           (is-balanced? (branch-structure (right-branch x))))))
       

; d.  Suppose we change the representation of mobiles so that the
; constructors are

(define (make-mobile left right)
  (cons left right))
(define (make-branch length structure)
  (cons length structure))

; How much do you need to change your programs to convert to the new
; representation?

; Only the selectors right-branch and branch-structure need to be
; changed to use cdr instead of cadr; all other procedures will work
; correctly.

(define (right-branch mobile) 
  (cdr mobile))

(define (branch-structure branch)
  (cdr branch))


; (define m1 (make-mobile (make-branch 2 6) (make-branch 3 4)))

; (define m2 (make-mobile (make-branch 1 5) (make-branch 5 1)))

; (define m3 (make-mobile (make-branch 6 m1) (make-branch 10 m2)))

; 1 ]=> (total-weight m3)
; Value: 16

; 1 ]=> (is-balanced? m3)
; Value: #t



(Exercise 2.30)

; Define a procedure square-tree analogous to the square-list
; procedure of exercise 2.21. That is, square-tree should behave as
; follows:

; (square-tree (list 1 (list 2 (list 3 4) 5) (list 6 7)))
; 
; (1 (4 (9 16) 25) (36 49))

; Define square-tree both directly (i.e., without using any
; higher-order procedures) and also by using map and recursion.


(define (square-tree-direct tree)
  (cond ((null? tree) '())
        ((not (pair? tree)) (* tree tree))
        (else (cons (square-tree-direct (car tree))
                    (square-tree-direct (cdr tree))))))


(define (square-tree-map tree)
  (map (lambda (subtree)
         (if (pair? subtree)
             (square-tree-map subtree)
             (* subtree subtree)))
       tree))



(Exercise 2.31)

; We can represent a set as a list of distinct elements, and we can
; represent the set of all subsets of the set as a list of lists. For
; example, if the set is (1 2 3), then the set of all subsets is (()
; (3) (2) (2 3) (1) (1 3) (1 2) (1 2 3)). Complete the following
; definition of a procedure that generates the set of subsets of a set
; and give a clear explanation of why it works:

(define nil '())

(define (subsets s)
  (if (null? s)
      (list nil)
      (let ((rest (subsets (cdr s))))
        (append rest 
                (map (lambda (elem) (cons (car s) elem))
                     rest)))))

; ANS. This procedure works because it recursively constructs two
; copies of the list of subsets of the cdr of a set, and attaches the
; car element onto each subset of the second of these lists, and then
; appends the lists together. In the case of the set containing only
; one element x, this procedure creates two copies of the list of
; subsets of the cdr of the set; the cdr of the set in this case is
; "nil" and hence the only item in each list of susbsets is '(). The
; procedure then attaches x onto each element of one of the lists
; (creating '(x)) and appends the two lists together, creating '(()
; (x)). One can imagine that in the case of a set of two elements, (x
; y), the "rest" in the first call of subsets will be '(() (y))
; according to the explanation of the one-element set above. Then, x
; will be attached onto each element of the second of the two copies
; of this "rest", the copies then being appending together, making
; '(() (y) (x) (xy)). Hence, for any given set, all possible subsets,
; those containing the car element and those not containing the car
; element, are recursively constructed.
