SICP_solutions_13_Ex140_146.txt

******
200416
200417

(Exercise 1.40)

; Define a procedure cubic that can be used together with the
; newtons-method procedure in expressions of the form 
; 
; (newtons-method (cubic a b c) 1) 
;
; to approximate zeros of the cubic x^3 + ax^2 + bx + c.


; Defining new procedure (cubic) to represent f(x) -> x^3 + ax^2 + bx
; + c:

(define										(cubic a b c)
   (lambda (x) (+ (* x x x) (* a x x) (* b x) c)))

; (newtons-method) procedure is as defined in book etc. 

Test 1) f(x) = x^3 + x^2 + x + 1 has exactly one real root: x = -1

1 ]=> (newtons-method (cubic 1 1 1) 1)

;Value: -.9999999999997796


Test 2) f(x) = x^3 + x^2 + x*x + 3 has exactly one real root: ≈-1.2757

1 ]=> (newtons-method (cubic 1 2 3) 1)

;Value: -1.2756822036498454


Test 3) f(x) = x^3 - 23*x^2 - 5*x + 11 has three real roots: ≈
-0.79308, 0.59797, and 23.195.

1 ]=> (newtons-method (cubic -23 -5 11) 1)

;Value: .597966762420859

1 ]=> (newtons-method (cubic -23 -5 11) -1)

;Value: -.793083788483213

1 ]=> (newtons-method (cubic -23 -5 11) 100)

;Value: 23.195117026124144



(Exercise 1.41)

; Define a procedure double that takes a procedure of one argument as
; argument and returns a procedure that applies the original procedure
; twice. For example, if inc is a procedure that adds 1 to its
; argument, then (double inc) should be a procedure that adds 2. What
; value is returned by 
; (((double (double double)) inc) 5)


; Definition of (double) procedure:

(define (double f)
   (lambda (x) (f (f x))))


(define (inc n) (+ n 1))


(((double (double double)) inc) 5)

;Value: 21, because by applicative-order evaluation:

(((double (double double)) inc) 5)
(((double (double (f (f (x))))) inc) 5)
(((double (f (f (f (f (x)))))) inc) 5)
(((f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f x)))))))))))))))) inc) 5)

* because the outermost (double) composes its argument, and the
  argument is the innermost (double double) which applies an argument
  f four times, so (double double) is applied four times, giving a
  composition of 16 f.

(<inc applied 16 times> 5)
5 + 16 = 21.



(Exercise 1.42)

; Let f and g be two one-argument functions. The composition f after g
; is defined to be the function x f(g(x)). Define a procedure compose
; that implements composition. For example, if inc is a procedure that
; adds 1 to its argument, 
;
; ((compose square inc) 6) 49.


; Procedure to compose two input functions f and g:

(define (compose f g)
   (lambda (x) (f (g x))))


; Check:

(define	(inc n) (+ 1 n))

((compose square inc) 6)

;Value: 49


(Exercise 1.43) 

; If f is a numerical function and n is a positive integer, then we
; can form the nth repeated application of f, which is defined to be
; the function whose value at x is f(f(...(f(x))...)). For example, if
; f is the function x x + 1, then the nth repeated application of f is
; the function x -> x + n. If f is the operation of squaring a number,
; then the nth repeated application of f is the function that raises
; its argument to the 2^nth power. Write a procedure that takes as
; inputs a procedure that computes f and a positive integer n and
; returns the procedure that computes the nth repeated application of
; f. Your procedure should be able to be used as follows: 
; 
; ((repeated square 2) 5) -> 625
;
; Hint: You may find it convenient to use compose from exercise 1.42.


; Procedure (compose f g) from Exercise 1.42:

(define (compose f g)
   (lambda (x) (f (g x))))



; Defining procedure (repeated f n):

(define	    (repeated f n)
   (define (repeated-iter f rep-f i)
      (if (= i n)
          rep-f
      	    (repeated-iter f (compose f rep-f) (+	1 i))))
   (repeated-iter f f 1))


; Check: 

1 ]=> ((repeated square 2) 5)

;Value: 625


(Exercise 1.44) 

; The idea of smoothing a function is an important concept in signal
; processing. If f is a function and dx is some small number, then the
; smoothed version of f is the function whose value at a point x is
; the average of f(x - dx), f(x), and f(x + dx). Write a procedure
; smooth that takes as input a procedure that computes f and returns a
; procedure that computes the smoothed f. It is sometimes valuable to
; repeatedly smooth a function (that is, smooth the smoothed function,
; and so on) to obtained the n-fold smoothed function. Show how to
; generate the n-fold smoothed function of any given function using
; smooth and repeated from exercise 1.43.


; Defining (smooth f) which smooths a function f:

(define dx 0.00001)

(define (average-of-three a b c)
   (/ (+ a b c) 3.0))

(define (smooth f)
   (lambda (x) (average-of-three (f (- x dx))
                                 (f x)
                                 (f (+ x dx)))))


; Procedure (compose f g) from Exercise 1.42:

(define (compose f g)
   (lambda (x) (f (g x))))


; Procedure (repeated f n) from Exercise 1.43:

(define (repeated f n)
   (define (repeated-iter f rep-f i)
      (if (= i n)
          rep-f
          (repeated-iter f (compose f rep-f) (+ 1 i))))
   (repeated-iter f f 1))


; Defining (n-fold-smooth f n) which smooths a function f n-fold
; times:

(define (n-fold-smooth f n)
   ((repeated smooth n) f))



(Exercise 1.45)

; We saw in section 1.3.3 that attempting to compute square roots by
; naively finding a fixed point of y -> x/y does not converge, and
; that this can be fixed by average damping. The same method works for
; finding cube roots as fixed points of the average-damped y ->
; x/y2. Unfortunately, the process does not work for fourth roots -- a
; single average damp is not enough to make a fixed-point search for y
; -> x/y3 converge. On the other hand, if we average damp twice (i.e.,
; use the average damp of the average damp of y -> x/y3) the
; fixed-point search does converge. Do some experiments to determine
; how many average damps are required to compute nth roots as a
; fixed-point search based upon repeated average damping of y ->
; x/yn-1. Use this to implement a simple procedure for computing nth
; roots using fixed-point, average-damp, and the repeated procedure of
; exercise 1.43. Assume that any arithmetic operations you need are
; available as primitives.


; Procedure (fixed-point) defined in book, amended to print the guess
; used in each iteration:

(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (newline)
    (display guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))


; Procedure (average-damp f) defined in book:

(define (average-damp f)
  (lambda (x) (average x (f x))))

(define (average a b)
   (/ (+ a b) 2.0))


; Defining square roots, cube roots and fourth roots with a single
; average-damp:

(define (sqrt x) 
   (fixed-point (average-damp (lambda (y) (/ x y))) 
                1.0))

(define (cube-root x)
   (fixed-point (average-damp (lambda (y) (/ x (square y))))
                1.0))

(define (fourth-root-x x) ; Which does not work, infinite recursion
   (fixed-point (average-damp (lambda (y) (/ x (* y y y))))
                1.0))

(define (fourth-root x) ; Which does work with 2x average damping
   (fixed-point ((repeated average-damp 2) (lambda (y) (/ x (* y y y))))
                1.0))


; Procedure (repeated f n) from Exercise 1.43:

(define (compose f g)
   (lambda (x) (f (g x))))

(define (repeated f n)
   (define (repeated-iter f rep-f i)
      (if (= i n)
          rep-f
          (repeated-iter f (compose f rep-f) (+ 1 i))))
   (repeated-iter f f 1))


; Procedure (e-nth-root-of-x) to experiment with how many (r) average
; damps are required to compute nth root of x, using the fixed-point
; search based upon repeated average-damping of y -> x/(y^(n-1)):

(define (e-nth-root-of-x n x r)
   (fixed-point ((repeated average-damp r) 
                    (lambda (y) (/ x (expt y (- n 1)))))
                1.0))


; Experiments show that the number of repeats (r) required to
; calculate the "n"-th root is the floor of log_2(n).
;
; Defining pprocedure (nth-root-of-x) accordingly:

(define (nth-root-of-x n x)
   (let ((r (floor-log-2 n)))
      (fixed-point ((repeated average-damp r)
                       (lambda (y) (/ x (expt y (- n 1)))))
                   0.1)))

(define (floor-log-2 a)
   (define (iter a count)
      (if (< a 2)
          count
          (iter (/ a 2) (+ count 1))))
   (iter a 0))



(Exercise 1.46)

; Several of the numerical methods described in this chapter are
; instances of an extremely general computational strategy known as
; iterative improvement. Iterative improvement says that, to compute
; something, we start with an initial guess for the answer, test if
; the guess is good enough, and otherwise improve the guess and
; continue the process using the improved guess as the new
; guess. Write a procedure iterative-improve that takes two procedures
; as arguments: a method for telling whether a guess is good enough
; and a method for improving a guess. Iterative-improve should return
; as its value a procedure that takes a guess as argument and keeps
; improving the guess until it is good enough. Rewrite the sqrt
; procedure of section 1.1.7 and the fixed-point procedure of section
; 1.3.3 in terms of iterative-improve.

; Defining (iterative-improve):

(define (iterative-improve good-enough? improve)
   (lambda (x)
      (define (iter guess)
         (newline)
         (display guess)
         (if (good-enough? guess)
             guess
             (iter (improve guess))))
   (iter x)))


; Trouble-shooting

(define (equals-4? guess) (= guess 4))

(define (inc guess) (+ 1 guess))

((iterative-improve equals-4? inc) 0)


; Rewriting the (sqrt) procedure from Section 1.1.7 in terms of
; (iterative-improve):

(define (sqrt-ii x)
   (define (close-enough? guess)
      (< (abs (- (square guess) x)) 0.00001))
   (define (improve-sqrt guess)
      (/ (+ guess (/ x guess)) 2.0))
   ((iterative-improve close-enough? improve-sqrt) 1.0))

; Test:

(sqrt-ii 81)

; Answer: 9.000000000007091 (CORRECT)


; Rewriting the (fixed-point) procedure from Section 1.3.3 in terms of
; (iterative-improve):

(define (fixed-point-ii f guess)
   (define (close-enough? guess)
      (< (abs (- guess (f guess))) 0.00001))
   (define (improve-fp guess)
      (f guess))
   ((iterative-improve close-enough? improve-fp) guess))

; Test 1, fixed point of cos:

(fixed-point-ii cos 1.0)

;Value: .7390893414033928 (CORRECT)

; Test 2, fixed point of y = sin(y) + cos(y):

(fixed-point (lambda (y) (+ (sin y) (cos y))) 1.0)

;Value: 1.2587315962971173 (CORRECT)



